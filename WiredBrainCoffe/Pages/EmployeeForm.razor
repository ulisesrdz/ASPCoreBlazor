
@if (Employee is not null)
{
    <EditForm Model="@Employee" OnValidSubmit="@HandleValidationSubmint" OnInvalidSubmit="@HandleInvalidationSubmint">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="FirstName" class="form-label">First Name</label>
            <InputText id="FirstName" class="form-control" @bind-Value="Employee.FirstName" />
            @* <ValidationMessage For="() => Employee.FirstName"/> *@
        </div>
        <div class="mb-3">
            <label for="LastName" class="form-label">Last Name</label>
            <InputText id="LastName" class="form-control" @bind-Value="Employee.LastName" />
            @* <ValidationMessage For="() => Employee.LastName"/> *@
        </div>
        <div class="mb-3">
            <label for="Department" class="form-label">Department</label>
            <InputSelect id="Department" class="form-select" @bind-Value="Employee.DepartmentId">
                @if (Departments is not null)
                {
                    @foreach (var department in Departments)
                    {
                        <option value="@department.Id">@department.Name</option>
                    }
                }
            </InputSelect>
        </div>
        <div class="mb-3">
            <label for="idDeveloper" class="form-label">Is Developer</label>
            <InputCheckbox id="idDeveloper" class="form-check-input" @bind-Value="Employee.IsDeveloper" />
        </div>
        @if(IsEdit)
        {
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">Update</button>
            <button type="button" class="btn btn-secondary" @onclick="HandleCancel" disabled="@IsBusy">Cancel</button>
        }
        else
        {
            <button type="submit" class="btn btn-primary" disabled="@IsBusy">Add</button>
        }
        
    </EditForm>

}

@code {
    [Parameter]
    public Employee? Employee { get; set; }
    [Parameter]
    public Department[]? Departments { get; set; }
    [Parameter]
    public bool IsBusy { get; set; }
    [Parameter]
    public bool IsEdit { get; set; }
    [Parameter]
    public EventCallback OnCancel { get; set; }
    [Parameter]
    public EventCallback<bool> OnSubmit { get; set; }

    private async Task HandleValidationSubmint()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(true);
        }
    }

    private async Task HandleInvalidationSubmint()
    {
        if (OnSubmit.HasDelegate)
        {
            await OnSubmit.InvokeAsync(false);
        }
    }

    private async Task HandleCancel()
    {
        if (OnCancel.HasDelegate)
        {
            await OnCancel.InvokeAsync();
        }
    }
}
