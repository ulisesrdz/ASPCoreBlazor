@page "/employees/edit/{employeeId:int}"
@inject IDbContextFactory<EmployeeManagerDbContext> ContextFactory
@inject NavigationManager NavigationManager
@inject StateContainer StateContainer

<PageTitle>Edit Employee</PageTitle>

<h1>Edit Employee</h1>
@if(Employee is null && !IsBusy)
{
    <div class="alert alert-danger">Employee with Id @EmployeeId was not found.</div>
}
else
{
    <EmployeeForm Employee="@Employee" 
        Departments="@Departments" 
        IsBusy="@IsBusy" 
        IsEdit="true"
        OnSubmit="@HandleSubmit"
        OnCancel="NavigateToOverviewPage"/>
}

@if(ErrorMessage is not null)
{
    <br/>
    <div class="alert alert-danger">@ErrorMessage</div>
}
@code {

    [Parameter]
    public int? EmployeeId { get; set; }

    private Employee? Employee { get; set; }
    private Department[]? Departments { get; set; }
    private bool IsBusy { get; set; }
    public string? ErrorMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        IsBusy = true;
        try
        {
            using var context = ContextFactory.CreateDbContext();
            Departments = await context.Departments.AsNoTracking().OrderBy(dept => dept.Name).ToArrayAsync();
            Employee = await context.Employees.AsNoTracking().FirstOrDefaultAsync(emp => emp.Id == EmployeeId);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error while searching employee: {ex.Message}";
            throw;
        }
        finally
        {
            IsBusy = false;

        }

    }
    private async Task HandleSubmit(bool isValid)
    {
        if (Employee is null || IsBusy || !isValid)
        {
            ErrorMessage = null;
            return;
        }

        IsBusy = true;
        try
        {
            using var context = ContextFactory.CreateDbContext();
            context.Employees.Update(Employee);
            await context.SaveChangesAsync();

            NavigateToOverviewPage();
        }
        catch (DbUpdateConcurrencyException)
        {
            ErrorMessage = "The employee was changed by another user. Please reload the page.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error while saving employee: {ex.Message}";
            throw;
        }
        finally
        {
            IsBusy = false;
        }
    }

    private void NavigateToOverviewPage()
    {
        NavigationManager.NavigateTo($"/employees/list/{StateContainer.EmployeeOverviewPage}");
    }
}
